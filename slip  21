Q.1 Write a simulation program for disk scheduling using FCFS algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 55, 58, 39, 18, 90, 160, 150, 38, 184 Start Head Position: 50 
#include <stdio.h>
 #include <stdlib.h>
void fcfs(int requests[], int n, int head) {
    int total_head_movements = 0;
   
    printf("Disk Requests Order: ");
    for (int i = 0; i < n; i++) {
        total_head_movements += abs(head - requests[i]);
        head = requests[i];
        printf("%d ", head);
    }
    printf("\nTotal head movements: %d\n", total_head_movements);
 }
 int main() {
    int requests[] = {55, 58, 39, 18, 90, 160, 150, 38, 184};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head;
    printf("Enter the starting head position: ");
    scanf("%d", &head);
    fcfs(requests, n, head);
    return 0;
 }
 Q.2 Write an MPI program to calculate sum of all even randomly generated 1000 
numbers (stored in array) on a cluster
 #include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 int main(int argc, char *argv[]) {
    int rank, size, n = 1000;
    int numbers[n], local_sum = 0, global_sum = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            numbers[i] = rand() % 1000;
        }
    }
    MPI_Bcast(numbers, n, MPI_INT, 0, MPI_COMM_WORLD);
    for (int i = rank; i < n; i += size) {
        if (numbers[i] % 2 == 0) {
            local_sum += numbers[i];
        }
    }
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, 
MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Sum of all even numbers: %d\n", global_sum);
    }
    MPI_Finalize();
    return 0;
 }
