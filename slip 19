 Q.1 Write a C program to simulate Bankerâ€™s algorithm for the purpose of deadlock 
avoidance.Consider the following snapshot of system, A, B, C and D is the resource 
type. Proces s Allocation Max Available 
A B C D A B C D A B C D 
P0 0 3 2 4 6 5 4 4 3 4 4 2 
P1 1 2 0 1 4 4 4 4
 P2 0 0 0 0 0 0 1 2
P3 3 3 2 2 3 9 3 4 
P4 1 4 3 2 2 5 3 3 
P5 2 4 1 4 4 6 3 4
 a) Calculate and display the content of need matrix? 
b) Is the system in safe state? If display the safe sequence.
 #include <stdio.h>
 #define PROCESS_COUNT 5
 #define RESOURCE_COUNT 4
 int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
 {0, 0, 1, 2},
 {1, 0, 0, 0},
 {1, 3, 5, 4},
 {0, 6, 3, 2},
 {0, 0, 1, 4}
 };
 int max[PROCESS_COUNT][RESOURCE_COUNT] = {
 {0, 0, 1, 2},
 {1, 7, 5, 0},
 {2, 3, 5, 6},
 {0, 6, 5, 2},
 {0, 6, 5, 6}
 };
 int available[RESOURCE_COUNT] = {1, 5, 2, 0};
 int need[PROCESS_COUNT][RESOURCE_COUNT];
 void calculateNeedMatrix() {
 for (int i = 0; i < PROCESS_COUNT; i++) {
        for (int j = 0; j < RESOURCE_COUNT; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
 }
 int isSafeState() {
    int work[RESOURCE_COUNT];
    int finish[PROCESS_COUNT] = {0};
    int safeSequence[PROCESS_COUNT];
    int count = 0;
    for (int i = 0; i < RESOURCE_COUNT; i++) {
        work[i] = available[i];
    }
    while (count < PROCESS_COUNT) {
        int found = 0;
        for (int i = 0; i < PROCESS_COUNT; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < RESOURCE_COUNT; j++) {
                    if (need[i][j] > work[j])
                        break;
                }
                if (j == RESOURCE_COUNT) {
                    for (int k = 0; k < RESOURCE_COUNT; k++) {
                        work[k] += allocation[i][k];
                    }
                    safeSequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return 0;
        }
    }
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < PROCESS_COUNT; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");
    return 1;
 }
 int main() {
    calculateNeedMatrix();
    printf("Need Matrix:\n");
    for (int i = 0; i < PROCESS_COUNT; i++) {
        for (int j = 0; j < RESOURCE_COUNT; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    isSafeState();
    return 0;
 }

Q.2 Write a simulation program for disk scheduling using C-SCAN algorithm. Accept 
total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 23, 89, 132, 42, 187, 69, 36, 55 Start Head Position: 40 Direction: 
Left
#include<stdio.h>
#include<stdlib.h>
int main() 
{
int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move, index;
printf("Enter the number of requests: ");
scanf("%d", &n);
printf("Enter the request sequence: ");
for(i = 0; i < n; i++) {
scanf("%d", &RQ[i]);
}
printf("Enter the initial head position: ");
scanf("%d", &initial);
printf("Enter the total disk size: ");
scanf("%d", &size);
printf("Enter the head movement direction 1 for high, 0 for low: ");
scanf("%d", &move);
for(i = 0; i < n; i++)
{
for(j = 0; j < n - i - 1; j++)
{
if(RQ[j] > RQ[j+1])
{
int temp = RQ[j];
RQ[j] = RQ[j+1];
RQ[j+1] = temp;
}
}
}
for(i = 0; i < n; i++)
{
if(initial < RQ[i])
{
index = i;
break;
}
}
if(move == 1)
{
for(i = index; i < n; i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}

//change
TotalHeadMoment += abs(size -  RQ[i-1]-1);
TotalHeadMoment += abs(size - 1-0);
initial =0;
for(i =0;i < index ;  i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
else
{
for(i = index - 1; i >= 0; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
//change
TotalHeadMoment += abs( RQ[i+1]-0);
TotalHeadMoment += abs( size-1-0);
initial = size-1;
for(i = n-1; i >=index; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
printf("Total head movement is: %d\n", TotalHeadMoment);
return 0;
}









