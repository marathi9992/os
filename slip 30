Q.1 Write an MPI program to find the min number from randomly generated 1000 
numbers (stored in array) on a cluster (Hint: Use MPI_Reduce) 
Program to Find Minimum 
#include <stdio.h> 
#include <stdlib.h> 
#include <mpi.h> 
#include <limits.h>                  // For INT_MIN and INT_MAX 
 
int main(int argc, char **argv) { 
    int rank, size; 
    int i; 
    int min = INT_MAX;                          //   min to largest possible values 
    int a[1000]; 
 
    MPI_Init(NULL, NULL); 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
    MPI_Comm_size(MPI_COMM_WORLD, &size); 
 
    for(i = 0; i < 1000; i++) { 
        a[i] = rand() % 999; 
 
        if(a[i] < min)  
min = a[i];  // Update min value if current number is smaller 
    } 
 
    if(rank == 0) { 
        prin ("Min = %d\n", min); 
    } 
 
    MPI_Finalize(); 
    return 0; 
}


Q.2 Write a simulation program for disk scheduling using FCFS algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 65, 95, 30, 91, 18, 116, 142, 44, 168 Start Head Position: 58
#include <stdio.h>
 #include <stdlib.h>
void fcfs(int requests[], int n, int head) {
    int total_head_movements = 0;
   
    printf("Disk Requests Order: ");
    for (int i = 0; i < n; i++) {
        total_head_movements += abs(head - requests[i]);
        head = requests[i];
        printf("%d ", head);
    }
    printf("\nTotal head movements: %d\n", total_head_movements);
 }
 int main() {
    int requests[] = {55, 58, 39, 18, 90, 160, 150, 38, 184};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head;
    printf("Enter the starting head position: ");
    scanf("%d", &head);
    fcfs(requests, n, head);
    return 0;
 }
