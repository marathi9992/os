 Q.1 Write a simulation program for disk scheduling using C-LOOK algorithm. Accept 
total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 56, 59, 40, 19, 91, 161, 151, 39, 185 Start Head Position: 48 
Direction: User Defined 
#include<stdio.h>
#include<stdlib.h>
int main() 
{
int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move, index;
printf("Enter the number of requests: ");
scanf("%d", &n);
printf("Enter the request sequence: ");
for(i = 0; i < n; i++) {
scanf("%d", &RQ[i]);
}
printf("Enter the initial head position: ");
scanf("%d", &initial);
printf("Enter the total disk size: ");
scanf("%d", &size);
printf("Enter the head movement direction 1 for high, 0 for low: ");
scanf("%d", &move);
for(i = 0; i < n; i++)
{
for(j = 0; j < n - i - 1; j++)
{
if(RQ[j] > RQ[j+1])
{
int temp = RQ[j];
RQ[j] = RQ[j+1];
RQ[j+1] = temp;
}
}
}
for(i = 0; i < n; i++)
{
if(initial < RQ[i])
{
index = i;
break;
}
}
if(move == 1)
{
for(i = index; i < n; i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}

//change
TotalHeadMoment += abs(size -  RQ[i-1]-1);
TotalHeadMoment += abs(size - 1-0);
initial =0;
for(i =0;i < index ;  i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
else
{
for(i = index - 1; i >= 0; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
//change
TotalHeadMoment += abs( RQ[i+1]-0);
TotalHeadMoment += abs( size-1-0);
initial = size-1;
for(i = n-1; i >=index; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
printf("Total head movement is: %d\n", TotalHeadMoment);
return 0;
}
Q.2 Write an MPI program to calculate sum of randomly generated 1000 numbers 
(stored in array) on a cluster
#include <mpi.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
 #define ARRAY_SIZE 1000
 int main(int argc, char *argv[]) {
    int rank, size, i, sum = 0, total_sum = 0;
    int numbers[ARRAY_SIZE], local_sum = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < ARRAY_SIZE; i++) {
            numbers[i] = rand() % 100;
        }
    }
    int chunk_size = ARRAY_SIZE / size;
    int local_numbers[chunk_size];
    MPI_Scatter(numbers, chunk_size, MPI_INT, local_numbers, chunk_size, MPI_INT, 
0, MPI_COMM_WORLD);
    for (i = 0; i < chunk_size; i++) {
        local_sum += local_numbers[i];
    }
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, 
MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Total sum of 1000 numbers: %d\n", total_sum);
    }
    MPI_Finalize();
    return 0;
 }
