 Q.1 Write a simulation program for disk scheduling using LOOK algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 86, 147, 91, 170, 95, 130, 102, 70 Starting Head position= 125 
Direction: User Defined 
#include <stdio.h>
 #include <stdlib.h>
 void swap(int *a, int *b) {
 int temp = *a;
 *a = *b;
 *b = temp;
 }
 void sortRequests(int requests[], int n) {
 for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (requests[j] > requests[j + 1]) {
                swap(&requests[j], &requests[j + 1]);
            }
        }
    }
 }
 void look(int requests[], int n, int head, int direction) {
    int total_head_movements = 0;
    int served[n];
    for (int i = 0; i < n; i++) {
        served[i] = 0;
    }
    sortRequests(requests, n);
    int start = (direction == 1) ? 0 : n - 1;
    int end = (direction == 1) ? n - 1 : 0;
    int step = (direction == 1) ? 1 : -1;
    printf("Disk Requests Order: ");
    for (int i = start; (direction == 1 && i <= end) || (direction == 0 && i >= end); i += step) {
        total_head_movements += abs(head - requests[i]);
        head = requests[i];
        printf("%d ", head);
    }
    printf("\nTotal head movements: %d\n", total_head_movements);
 }
 int main() {
    int requests[] = {86, 147, 91, 170, 95, 130, 102, 70};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head, direction;
    printf("Enter the starting head position: ");
    scanf("%d", &head);
    printf("Enter the direction (1 for right, 0 for left): ");
    scanf("%d", &direction);
    look(requests, n, head, direction);
    return 0;
 }
Q.2 Write a program to simulate Linked file allocation method. Assume disk with n 
number of blocks. Give value of n as input. Randomly mark some block as allocated 
and accordingly maintain the list of free blocks Write menu driver program with menu 
options as mentioned below and implement each option. 
• Show Bit Vector 
• Create New File
 • Show Directory 
• Exit
 #include <stdio.h>
 #include <stdlib.h>
 #define MAX_BLOCKS 100
 int disk[MAX_BLOCKS];
 int n;
 void showBitVector() {
    printf("Bit Vector: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", disk[i]);
    }
    printf("\n");
 }
 void showDirectory() {
    printf("Directory (Allocated blocks): ");
    for (int i = 0; i < n; i++) {
        if (disk[i] == 1) {
            printf("%d ", i);
        }
    }
    printf("\n");
 }
 void deleteFile(int start, int length) {
    int i;
    for (i = start; i < start + length && i < n; i++) {
        if (disk[i] == 1) {
            disk[i] = 0;
        }
    }
    printf("File deleted from blocks %d to %d\n", start, i-1);
 }
 int main() {
    int option, start, length;
   
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);
   
    for (int i = 0; i < n; i++) {
        disk[i] = rand() % 2;
    }
    while (1) {
        printf("\nMenu:\n");
        printf("1. Show Bit Vector\n");
        printf("2. Show Directory\n");
        printf("3. Delete File\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &option);
        switch (option) {
            case 1:
                showBitVector();
                break;
            case 2:
                showDirectory();
                break;
            case 3:
                printf("Enter the starting block and length of the file to delete: ");
                scanf("%d %d", &start, &length);
                deleteFile(start, length);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
 }
