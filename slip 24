 Q.1 Write an MPI program to calculate sum of all odd randomly generated 1000 
numbers (stored in array) on a cluster. 
Program to Calculate Sum of Odd 
#include <stdio.h> 
#include <stdlib.h> 
#include <mpi.h> 
 
int main(int argc, char **argv) { 
    int rank, size; 
    int i, odd = 0; 
    int a[1000]; 
 
    MPI_Init(NULL, NULL); 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
    MPI_Comm_size(MPI_COMM_WORLD, &size); 
 
    for(i = 0; i < 1000; i++) { 
        a[i] = rand() % 999; 
 
        if(a[i] % 2 != 0) 
            odd += a [i];  // Sum of odd numbers 
    } 
 
    if(rank == 0) { 
        prin ("Sum of Odd Numbers = %d\n", odd); 
    } 
 
    MPI_Finalize(); 
    return 0; 
} 


Q.2 Write a C program to simulate Bankerâ€™s algorithm for the purpose of deadlock 
avoidance.The following snapshot of system, A, B, C and D are the resource type. 
Proces s Allocation Max Available 
A B C A B C A B C 
P0 0 1 0 0 0 0 0 0 0 
P1 2 0 0 2 0 2 
P2 3 0 3 0 0 0 
P3 2 1 1 1 0 0 
P4 0 0 2 0 0 2 
a)Calculate and display the content of need matrix? 
b)Is the system in safe state? If display the safe sequence
 #include <stdio.h>
 #define PROCESS_COUNT 5
 #define RESOURCE_COUNT 4
 int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
 {0, 0, 1, 2},
 {1, 0, 0, 0},
 {1, 3, 5, 4},
 {0, 6, 3, 2},
 {0, 0, 1, 4}
 };
 int max[PROCESS_COUNT][RESOURCE_COUNT] = {
 {0, 0, 1, 2},
 {1, 7, 5, 0},
 {2, 3, 5, 6},
 {0, 6, 5, 2},
 {0, 6, 5, 6}
 };
 int available[RESOURCE_COUNT] = {1, 5, 2, 0};
 int need[PROCESS_COUNT][RESOURCE_COUNT];
 void calculateNeedMatrix() {
 for (int i = 0; i < PROCESS_COUNT; i++) {
        for (int j = 0; j < RESOURCE_COUNT; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
 }
 int isSafeState() {
    int work[RESOURCE_COUNT];
    int finish[PROCESS_COUNT] = {0};
    int safeSequence[PROCESS_COUNT];
    int count = 0;
    for (int i = 0; i < RESOURCE_COUNT; i++) {
        work[i] = available[i];
    }
    while (count < PROCESS_COUNT) {
        int found = 0;
        for (int i = 0; i < PROCESS_COUNT; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < RESOURCE_COUNT; j++) {
                    if (need[i][j] > work[j])
                        break;
                }
                if (j == RESOURCE_COUNT) {
                    for (int k = 0; k < RESOURCE_COUNT; k++) {
                        work[k] += allocation[i][k];
                    }
                    safeSequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return 0;
        }
    }
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < PROCESS_COUNT; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");
    return 1;
 }
 int main() {
    calculateNeedMatrix();
    printf("Need Matrix:\n");
    for (int i = 0; i < PROCESS_COUNT; i++) {
        for (int j = 0; j < RESOURCE_COUNT; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    isSafeState();
    return 0;
 }
