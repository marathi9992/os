 Q.1 Write an MPI program to calculate sum of all odd randomly generated 1000 
numbers (stored in array) on a cluster.
 #include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 int main(int argc, char *argv[]) {
    int rank, size, n = 1000;
    int numbers[n], local_sum = 0, global_sum = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            numbers[i] = rand() % 1000;
        }
    }
    MPI_Bcast(numbers, n, MPI_INT, 0, MPI_COMM_WORLD);
    for (int i = rank; i < n; i += size) {
        if (numbers[i] % 2 != 0) {
            local_sum += numbers[i];
        }
    }
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, 
MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Sum of all odd numbers: %d\n", global_sum);
    }
    MPI_Finalize();
    return 0;
 }
 Q.2 Write a program to simulate Sequential (Contiguous) file allocation method. Assume 
disk with n number of blocks. Give value of n as input. Randomly mark some block as 
allocated and accordingly maintain the list of free blocks Write menu driver program with 
menu options as mentioned below and implement each option • Show Bit Vector • 
Delete already created file • Exit
 #include <stdio.h>
 #include <stdlib.h>
 #define MAX_BLOCKS 100
 int disk[MAX_BLOCKS];
 int n;
 void showBitVector() {
    printf("Bit Vector: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", disk[i]);
    }
    printf("\n");
 }
 void showDirectory() {
    printf("Directory (Allocated blocks): ");
    for (int i = 0; i < n; i++) {
        if (disk[i] == 1) {
            printf("%d ", i);
        }
    }
    printf("\n");
 }
 void deleteFile(int start, int length) {
    int i;
    for (i = start; i < start + length && i < n; i++) {
        if (disk[i] == 1) {
            disk[i] = 0;
        }
    }
    printf("File deleted from blocks %d to %d\n", start, i-1);
 }
 int main() {
    int option, start, length;
   
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);
   
    for (int i = 0; i < n; i++) {
        disk[i] = rand() % 2;
    }
    while (1) {
        printf("\nMenu:\n");
        printf("1. Show Bit Vector\n");
        printf("2. Show Directory\n");
        printf("3. Delete File\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &option);
        switch (option) {
            case 1:
                showBitVector();
                break;
            case 2:
                showDirectory();
                break;
            case 3:
                printf("Enter the starting block and length of the file to delete: ");
                scanf("%d %d", &start, &length);
                deleteFile(start, length);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
 }
