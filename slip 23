 Q.1 Consider a system with ‘m’ processes and ‘n’ resource types. Accept number of 
instances for every resource type. For each process accept the allocation and maximum 
requirement matrices. Write a program to display the contents of need matrix and to 
check if the given request of a process can be granted immediately or not 
#include <stdio.h>
 #include <stdlib.h>
void displayMatrix(int matrix[][10], int m, int n) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
 }
 void calculateNeedMatrix(int allocation[][10], int max[][10], int need[][10], int m, int n) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
 }
 int canGrantRequest(int request[], int available[], int need[], int n) {
    for (int i = 0; i < n; i++) {
        if (request[i] > need[i]) {
            return 0;
        }
        if (request[i] > available[i]) {
            return 0;
        }
    }
    return 1;
 }
 int main() {
    int m, n;
    printf("Enter the number of processes: ");
    scanf("%d", &m);
    printf("Enter the number of resource types: ");
    scanf("%d", &n);
    int allocation[m][n], max[m][n], available[n], need[m][n], request[n];
    printf("Enter the Allocation Matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }
    printf("Enter the Maximum Matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &max[i][j]);
        }
    }
    printf("Enter the Available resources:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &available[i]);
    }
    calculateNeedMatrix(allocation, max, need, m, n);
    printf("Need Matrix:\n");
    displayMatrix(need, m, n);
    printf("Enter the request from process: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &request[i]);
    }
    if (canGrantRequest(request, available, need[0], n)) {
        printf("The request can be granted immediately.\n");
    } else {
        printf("The request cannot be granted immediately.\n");
    }
    return 0;
 }
 Q.2 Write a simulation program for disk scheduling using SSTF algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 24, 90, 133, 43, 188, 70, 37, 55 Start Head Position: 58
 #include <stdio.h>
 #include <stdlib.h>
 void sortRequests(int requests[], int n, int head) {
    int temp;
    int minDist, minIndex;
    for (int i = 0; i < n - 1; i++) {
        minDist = abs(requests[i] - head);
        minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (abs(requests[j] - head) < minDist) {
                minDist = abs(requests[j] - head);
                minIndex = j;
            }
        }
        if (minIndex != i) {
            temp = requests[i];
            requests[i] = requests[minIndex];
            requests[minIndex] = temp;
        }
    }
 }
 void sstf(int requests[], int n, int head) {
    int totalHeadMovements = 0;
    int served[n];
    for (int i = 0; i < n; i++) {
        served[i] = 0;
    }
    printf("Request order: ");
    for (int i = 0; i < n; i++) {
        int minDist = -1;
        int index = -1;
        for (int j = 0; j < n; j++) {
            if (!served[j]) {
                int dist = abs(requests[j] - head);
                if (minDist == -1 || dist < minDist) {
                    minDist = dist;
                    index = j;
                }
            }
        }
        served[index] = 1;
        totalHeadMovements += minDist;
        head = requests[index];
        printf("%d ", requests[index]);
    }
    printf("\nTotal head movements: %d\n", totalHeadMovements);
 }
 int main() {
    int requests[] = {186, 89, 44, 70, 102, 22, 51, 124};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head;
    printf("Enter the starting head position: ");
    scanf("%d", &head);
    sstf(requests, n, head);
    return 0;
 }
 
