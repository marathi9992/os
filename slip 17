 Q.1 Write a program to simulate Indexed file allocation method. Assume disk with n 
number of blocks. Give value of n as input. Randomly mark some block as allocated 
and accordingly maintain the list of free blocks Write menu driver program with menu 
options as mentioned above and implement each option. 
• Show Bit Vector
 • Show Directory 
• Delete Already File 
• Exit
#include <stdio.h>
 #include <stdlib.h>
 #define MAX_BLOCKS 100
 int disk[MAX_BLOCKS];
 int n;
 void showBitVector() {
    printf("Bit Vector: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", disk[i]);
    }
    printf("\n");
 }
 void showDirectory() {
    printf("Directory (Allocated blocks): ");
    for (int i = 0; i < n; i++) {
        if (disk[i] == 1) {
            printf("%d ", i);
        }
    }
    printf("\n");
 }
 void deleteFile(int start, int length) {
    int i;
    for (i = start; i < start + length && i < n; i++) {
        if (disk[i] == 1) {
            disk[i] = 0;
        }
    }
    printf("File deleted from blocks %d to %d\n", start, i-1);
 }
 int main() {
    int option, start, length;
   
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);
   
    for (int i = 0; i < n; i++) {
        disk[i] = rand() % 2;
    }
    while (1) {
        printf("\nMenu:\n");
        printf("1. Show Bit Vector\n");
        printf("2. Show Directory\n");
        printf("3. Delete File\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &option);
        switch (option) {
            case 1:
                showBitVector();
                break;
            case 2:
                showDirectory();
                break;
            case 3:
                printf("Enter the starting block and length of the file to delete: ");
                scanf("%d %d", &start, &length);
                deleteFile(start, length);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
 }

Q.2 Write a simulation program for disk scheduling using LOOK algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 23, 89, 132, 42, 187, 69, 36, 55 
Start Head Position: 40
 Direction: Left 
#include<stdio.h>
#include<stdlib.h>
int main() 
{
int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move, index;
printf("Enter the number of requests: ");
scanf("%d", &n);
printf("Enter the request sequence: ");
for(i = 0; i < n; i++) {
scanf("%d", &RQ[i]);
}
printf("Enter the initial head position: ");
scanf("%d", &initial);
printf("Enter the total disk size: ");
scanf("%d", &size);
printf("Enter the head movement direction 1 for high, 0 for low: ");
scanf("%d", &move);
for(i = 0; i < n; i++)
{
for(j = 0; j < n - i - 1; j++)
{
if(RQ[j] > RQ[j+1])
{
int temp = RQ[j];
RQ[j] = RQ[j+1];
RQ[j+1] = temp;
}
}
}
for(i = 0; i < n; i++)
{
if(initial < RQ[i])
{
index = i;
break;
}
}
if(move == 1)
{
for(i = index; i < n; i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
/*TotalHeadMoment += abs(size - 1 - RQ[i-1]);
initial = size - 1;*/
for(i = index - 1; i >= 0; i--)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
else
{
for(i = index - 1; i >= 0; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
/*TotalHeadMoment += abs(0 - RQ[i+1]);
initial = 0;*/
for(i = index; i < n; i++) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
printf("Total head movement is: %d\n", TotalHeadMoment);
return 0;
}

