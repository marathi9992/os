Q.1 Write a C program to simulate Bankerâ€™s algorithm for the purpose of deadlock 
avoidance.Consider the following snapshot of system, A, B, C and D is the resource 
type. Proces s Allocation Max Available 
A B C D A B C D A B C D 
P0 0 0 1 2 0 0 1 2 1 5 2 0 
P1 1 0 0 0 1 7 5 0 
P2 1 3 5 4 2 3 5 6 
P3 0 6 3 2 0 6 5 2
 P4 0 0 1 4 0 6 5 6 
a)Calculate and display the content of need matrix? 
b)Is the system in safe state? If display the safe sequence.
 #include <stdio.h>
 #define PROCESS_COUNT 5
 #define RESOURCE_COUNT 4
 int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
 {0, 0, 1, 2},
 {1, 0, 0, 0},
 {1, 3, 5, 4},
 {0, 6, 3, 2},
 {0, 0, 1, 4}
 };
 int max[PROCESS_COUNT][RESOURCE_COUNT] = {
 {0, 0, 1, 2},
 {1, 7, 5, 0},
 {2, 3, 5, 6},
 {0, 6, 5, 2},
 {0, 6, 5, 6}
 };
 int available[RESOURCE_COUNT] = {1, 5, 2, 0};
 int need[PROCESS_COUNT][RESOURCE_COUNT];
 void calculateNeedMatrix() {
 for (int i = 0; i < PROCESS_COUNT; i++) {
        for (int j = 0; j < RESOURCE_COUNT; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
 }
 int isSafeState() {
    int work[RESOURCE_COUNT];
    int finish[PROCESS_COUNT] = {0};
    int safeSequence[PROCESS_COUNT];
    int count = 0;
    for (int i = 0; i < RESOURCE_COUNT; i++) {
        work[i] = available[i];
    }
    while (count < PROCESS_COUNT) {
        int found = 0;
        for (int i = 0; i < PROCESS_COUNT; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < RESOURCE_COUNT; j++) {
                    if (need[i][j] > work[j])
                        break;
                }
                if (j == RESOURCE_COUNT) {
                    for (int k = 0; k < RESOURCE_COUNT; k++) {
                        work[k] += allocation[i][k];
                    }
                    safeSequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return 0;
        }
    }
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < PROCESS_COUNT; i++) {
        printf("P%d ", safeSequence[i]);
    }
    printf("\n");
    return 1;
 }
 int main() {
    calculateNeedMatrix();
    printf("Need Matrix:\n");
    for (int i = 0; i < PROCESS_COUNT; i++) {
        for (int j = 0; j < RESOURCE_COUNT; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    isSafeState();
    return 0;
 }

 Q.2 Write a simulation program for disk scheduling using FCFS algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 56, 59, 40, 19, 91, 161, 151, 39, 185 Start Head Position: 48
#include <stdio.h>
 #include <stdlib.h>
void fcfs(int requests[], int n, int head) {
    int total_head_movements = 0;
   
    printf("Disk Requests Order: ");
    for (int i = 0; i < n; i++) {
        total_head_movements += abs(head - requests[i]);
        head = requests[i];
        printf("%d ", head);
    }
    printf("\nTotal head movements: %d\n", total_head_movements);
 }
 int main() {
    int requests[] = {55, 58, 39, 18, 90, 160, 150, 38, 184};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head;
    printf("Enter the starting head position: ");
    scanf("%d", &head);
    fcfs(requests, n, head);
    return 0;
 }
