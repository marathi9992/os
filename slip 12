Q.1 Write an MPI program to calculate sum and average randomly generated 1000 
numbers (stored in array) on a cluster. 
Program to Calculate Sum of Even 
#include <stdio.h> 
#include <stdlib.h> 
#include <mpi.h> 
 
int main(int argc, char **argv) { 
    int rank, size; 
    int i, even = 0; 
    int a[1000]; 
 
    MPI_Init(NULL, NULL); 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
    MPI_Comm_size(MPI_COMM_WORLD, &size); 
 
    for(i = 0; i < 1000; i++) { 
        a[i] = rand() % 999; 
 
        if(a[i] % 2 == 0) 
            even += a[i]; // Sum of even numbers 
    } 
 
    if(rank == 0) { 
        prin ("Sum of Even Numbers = %d\n", even); 
    } 
 
    MPI_Finalize(); 
    return 0; 
}
Q.2 Write a simulation program for disk scheduling using C-LOOK algorithm. Accept 
total number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments. 
23, 89, 132, 42, 187, 69, 36, 55 
Start Head Position: 40 
Direction: Right

#include<stdio.h>
#include<stdlib.h>
int main() 
{
int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move, index;
printf("Enter the number of requests: ");
scanf("%d", &n);
printf("Enter the request sequence: ");
for(i = 0; i < n; i++) {
scanf("%d", &RQ[i]);
}
printf("Enter the initial head position: ");
scanf("%d", &initial);
printf("Enter the total disk size: ");
scanf("%d", &size);
printf("Enter the head movement direction 1 for high, 0 for low: ");
scanf("%d", &move);
for(i = 0; i < n; i++)
{
for(j = 0; j < n - i - 1; j++)
{
if(RQ[j] > RQ[j+1])
{
int temp = RQ[j];
RQ[j] = RQ[j+1];
RQ[j+1] = temp;
}
}
}
for(i = 0; i < n; i++)
{
if(initial < RQ[i])
{
index = i;
break;
}
}
if(move == 1)
{
for(i = index; i < n; i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}

//change
/*TotalHeadMoment += abs(size -  RQ[i-1]-1);
TotalHeadMoment += abs(size - 1-0);
initial =0;*/
for(i =0;i < index ;  i++)
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
else
{
for(i = index - 1; i >= 0; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
//change
/*
TotalHeadMoment += abs( RQ[i+1]-0);
TotalHeadMoment += abs( size-1-0);
initial = size-1;*/
for(i = n-1; i >=index; i--) 
{
TotalHeadMoment += abs(RQ[i] - initial);
initial = RQ[i];
}
}
printf("Total head movement is: %d\n", TotalHeadMoment);
return 0;
}
